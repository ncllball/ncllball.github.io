#!/usr/bin/env node
// MOVED (2025-09-23) from scripts/enforce-punctuation.js
const fs=require('fs');const path=require('path');
const args=process.argv.slice(2);const WRITE=args.includes('--write');const VERBOSE=args.includes('--verbose');const PATH_ARG=(()=>{const p=args.find(a=>a.startsWith('--path'));if(!p)return null;const[,v]=p.split('=');return v||null;})();
const ROOT=process.cwd();const START_DIR=PATH_ARG?path.resolve(ROOT,PATH_ARG):ROOT;const IGNORE=new Set(['node_modules','.git','.github','images','images_unused','fonts','docs','ics']);
function walk(d){const files=[];for(const n of fs.readdirSync(d)){const f=path.join(d,n);let st;try{st=fs.statSync(f);}catch(e){continue;} if(st.isDirectory()){ if(IGNORE.has(n)) continue; files.push(...walk(f)); } else if(st.isFile()){ files.push(f);} } return files; }
function stripHtml(h){return h.replace(/<script[\s\S]*?<\/script>/gi,'').replace(/<style[\s\S]*?<\/style>/gi,'').replace(/<[^>]+>/g,'').replace(/&nbsp;/g,' ').replace(/\s+/g,' ').trim();}
function shouldTrim(t){if(!t) return false;const s=t.trim(); if(!s.endsWith('.')) return false; if(s.endsWith('...')||s.endsWith('….')||s.endsWith('…')) return false; const core=s.slice(0,-1); if(core.includes('.')||core.includes('?')||core.includes('!')) return false; const low=core.toLowerCase(); if(low.includes('http')||low.includes('www.')) return false; return true; }
function trimInner(inner){return inner.replace(/(\s*(?:<\/(?:em|strong|a|span|b|i|u|small|sup|sub)>)*)(\.)\s*$/i,'$1');}
function processLIs(html,file){return html.replace(/<li\b[^>]*>([\s\S]*?)<\/li>/gi,(full,inner)=>{const text=stripHtml(inner); if(shouldTrim(text)){const upd=trimInner(inner); if(VERBOSE) console.log('  - [li]',path.relative(ROOT,file)); return full.replace(inner,upd);} return full;});}
function processFooties(html,file){return html.replace(/<section\b([^>]*?)class=("|')[^"']*\bfooties\b[^"']*(\2)[^>]*>([\s\S]*?)<\/section>/gi,(sectionFull,attrs,q1,q2,sectionInner)=>{const newInner=sectionInner.replace(/<p\b[^>]*>([\s\S]*?)<\/p>/gi,(pFull,pInner)=>{const text=stripHtml(pInner); if(shouldTrim(text)){const upd=trimInner(pInner); if(VERBOSE) console.log('  - [footies <p>]',path.relative(ROOT,file)); return pFull.replace(pInner,upd);} return pFull;}); return sectionFull.replace(sectionInner,newInner);});}
function processFile(f){const src=fs.readFileSync(f,'utf8'); let out=src; out=processLIs(out,f); out=processFooties(out,f); const changed=out!==src; if(changed&&WRITE) fs.writeFileSync(f,out,'utf8'); return changed; }
function main(){const all=walk(START_DIR).filter(f=>f.toLowerCase().endsWith('.html')); let changed=0; if(!WRITE) console.log('Dry run: no files will be modified'); console.log(`Scanning ${all.length} HTML files under ${path.relative(ROOT,START_DIR)||'.'} ...`); for(const f of all){ if(processFile(f)) changed++; } console.log(`${WRITE?'Applied':'Would apply'} punctuation cleanup to ${changed} file(s)`); if(!WRITE) console.log('Run with --write to apply changes.'); }
main();