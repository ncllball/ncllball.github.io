#!/usr/bin/env node
const fs=require('fs');const path=require('path');
const args=process.argv.slice(2);const WRITE=args.includes('--write');const VERBOSE=args.includes('--verbose');const PATH_ARG=(()=>{const a=args.find(x=>x.startsWith('--path'));if(!a)return null;const[,v]=a.split('=');return v||null;})();
const ROOT=process.cwd();const START_DIR=PATH_ARG?path.resolve(ROOT,PATH_ARG):ROOT;const IGNORE=new Set(['node_modules','.git','images','images_unused','fonts','docs','ics']);
function walk(d){const out=[];for(const n of fs.readdirSync(d)){const f=path.join(d,n);let st;try{st=fs.statSync(f);}catch(e){continue;}if(st.isDirectory()){if(IGNORE.has(n))continue;out.push(...walk(f));}else if(st.isFile()&&f.toLowerCase().endsWith('.html'))out.push(f);}return out;}
function normalizeTagStripCost(h){let changed=false;let out=h;out=out.replace(/(<li\b[^>]*data-tag=\"cost\"[^>]*)(>)/gi,(m,start,end)=>{let s=start; if(!/data-cost-amount=\"0\"/i.test(s)){s+=' data-cost-amount="0"';changed=true;} if(!/data-cost-type=\"free\"/i.test(s)){s+=' data-cost-type="free"';changed=true;} if(/data-cost-unit=\"[^\"]+\"/i.test(s)){s=s.replace(/data-cost-unit=\"[^\"]+\"/i,'data-cost-unit="player"');changed=true;} else {s+=' data-cost-unit="player"';changed=true;} return s+end;}); out=out.replace(/(<li\b[^>]*data-tag=\"cost\"[^>]*>\s*<strong>\s*Cost:\s*<\/strong>)([\s\S]*?)(<\/li>)/gi,(full,open,inner,close)=>{const norm=' $0 / player (FREE)'; if(inner.replace(/\s+/g,' ')!==norm) changed=true; return open+norm+close;}); return {html:out,changed}; }
function normalizeCostSection(h){let changed=false;let out=h;const re=/(<h2\b[^>]*id=\"cost[^\"]*\"[^>]*>\s*Cost[^<]*<\/h2>)([\s\S]*?)(<p\b[^>]*>)([\s\S]*?)(<\/p>)/gi; out=out.replace(re,(match,h2,after,pOpen,pInner,pClose)=>{const desired='$0 / player (FREE)'; if(pInner.trim()!==desired){changed=true; return h2+after+pOpen+desired+pClose;} return match;}); return {html:out,changed}; }
function processFile(f){const src=fs.readFileSync(f,'utf8'); let changed=false; let out=src; const a=normalizeTagStripCost(out); out=a.html; changed=changed||a.changed; const b=normalizeCostSection(out); out=b.html; changed=changed||b.changed; if(changed){ if(WRITE) fs.writeFileSync(f,out,'utf8'); if(VERBOSE) console.log('* '+path.relative(ROOT,f)+' updated'); } return changed; }
function main(){ if(!WRITE) console.log('Dry run: no files will be modified'); const files=walk(START_DIR); let c=0; for(const f of files){ if(processFile(f)) c++; } console.log(`${WRITE?'Applied':'Would apply'} free cost normalization in ${c} file(s)`); if(!WRITE) console.log('Run with --write to apply changes.'); }
main();